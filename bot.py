import json
import os
import logging
import pytz
from datetime import datetime, time, timedelta, timezone
from telegram import Update, ReplyKeyboardMarkup, ParseMode
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler

TOKEN = os.getenv("7829591487:AAE9S2TUleAftie5609_WfLvZbAL3ZiWIjQ")
VERSES_FILE = "verses_nrp_365.json"
USERS_FILE = "users.json"

MoscowTZ = pytz.timezone("Europe/Moscow")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

CHOOSING_TIME = 1

def load_verses():
    with open(VERSES_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_users(data):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def format_verse(verse):
    header = "üïäÔ∏è *–°–ª–æ–≤–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è* üïäÔ∏è\n"
    body = f"*{verse['reference']}*\n{verse['text']}"
    if verse.get("comment"):
        body += f"\n\n_{verse['comment']}_"
    prayer = "\n\nüôè –ü–æ–º–æ–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è –∏ –ø–æ–ø—Ä–æ—Å–∏ –ë–æ–≥–∞ –±—ã—Ç—å —Ä—è–¥–æ–º."
    return header + body + prayer

def get_verse_for_user(user_id, verses, force_new=False):
    users = load_users()
    user = users.setdefault(str(user_id), {"next_verse_index": 0})
    today = datetime.now().strftime("%Y-%m-%d")

    if force_new or user.get("last_sent") != today:
        index = user["next_verse_index"] % len(verses)
        user["current_verse"] = index
        user["next_verse_index"] = index + 1
        user["last_sent"] = today
        save_users(users)
    else:
        index = user.get("current_verse", 0)
    return verses[index]

def start(update: Update, context: CallbackContext):
    kb = [["üìñ –°–ª–æ–≤–æ –Ω–∞ –¥–µ–Ω—å", "üôè –ú–æ–ª–∏—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–æ—Å—å–±–∞"],
          ["ü§î –ü–æ—á–µ–º—É –ë–æ–≥?", "‚ù§Ô∏è –ü—Ä–∏–Ω—è—Ç—å –ò–∏—Å—É—Å–∞"],
          ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è"]]
    update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –¥–µ–ª–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π –ë–æ–∂—å–∏–º –°–ª–æ–≤–æ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. ‚úùÔ∏è", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))

def slovo(update: Update, context: CallbackContext):
    verses = load_verses()
    verse = get_verse_for_user(update.effective_user.id, verses)
    update.message.reply_text(format_verse(verse), parse_mode=ParseMode.MARKDOWN)

def prayer(update: Update, context: CallbackContext):
    update.message.reply_text("‚úç –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –º–æ–ª–∏—Ç–≤–µ–Ω–Ω—É—é –Ω—É–∂–¥—É, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ—ë –º–æ–ª–∏—Ç–≤–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.")

def why_god(update: Update, context: CallbackContext):
    update.message.reply_text("ü§ç –ë–æ–≥ ‚Äî —ç—Ç–æ –õ—é–±–æ–≤—å. –û–Ω —Å–æ–∑–¥–∞–ª —Ç–µ–±—è –Ω–µ —Å–ª—É—á–∞–π–Ω–æ, –∞ —Å —Ü–µ–ª—å—é. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ.")

def accept_jesus(update: Update, context: CallbackContext):
    update.message.reply_text("‚ù§Ô∏è –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏–Ω—è—Ç—å –ò–∏—Å—É—Å–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏ –æ—Ç —Å–µ—Ä–¥—Ü–∞:\n\n¬´–ì–æ—Å–ø–æ–¥—å –ò–∏—Å—É—Å, –ø—Ä–æ—Å—Ç–∏ –º–æ–∏ –≥—Ä–µ—Ö–∏. –í–æ–π–¥–∏ –≤ –º–æ—é –∂–∏–∑–Ω—å. –Ø –≤–µ—Ä—é, —á—Ç–æ –¢—ã —É–º–µ—Ä –∏ –≤–æ—Å–∫—Ä–µ—Å. –Ø –ø—Ä–∏–Ω–∏–º–∞—é –¢–µ–±—è –∫–∞–∫ —Å–≤–æ–µ–≥–æ –ì–æ—Å–ø–æ–¥–∞ –∏ –°–ø–∞—Å–∏—Ç–µ–ª—è. –ê–º–∏–Ω—å.¬ª")

def settime_entry(update: Update, context: CallbackContext):
    update.message.reply_text("üïí –í–≤–µ–¥–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30):")
    return CHOOSING_TIME

def settime_received(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    users = load_users()
    text = update.message.text.strip()

    try:
        parts = text.split(":")
        if len(parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")

        h, m = int(parts[0]), int(parts[1])
        if not (0 <= h < 24 and 0 <= m < 60):
            raise ValueError("–í—Ä–µ–º—è –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")

        users.setdefault(user_id, {})["time"] = f"{h:02d}:{m:02d}"
        save_users(users)

        context.job_queue.run_daily(
            callback=send_daily_verse,
            time=time(h, m, tzinfo=MoscowTZ),
            context=int(user_id),
            name=f"verse_{user_id}"
        )
        update.message.reply_text(f"‚úÖ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {h:02d}:{m:02d}")
        return ConversationHandler.END

    except Exception as e:
        logger.warning(f"[–û–®–ò–ë–ö–ê –£–°–¢–ê–ù–û–í–ö–ò –í–†–ï–ú–ï–ù–ò] {e}")
        update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ –≤–∏–¥–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30):")
        return CHOOSING_TIME

def send_daily_verse(context: CallbackContext):
    user_id = context.job.context
    logger.info(f"üîî send_daily_verse –≤—ã–∑–≤–∞–Ω –¥–ª—è user_id={user_id}")
    verses = load_verses()
    verse = get_verse_for_user(user_id, verses, force_new=True)
    try:
        context.bot.send_message(chat_id=user_id, text=format_verse(verse), parse_mode=ParseMode.MARKDOWN)
        logger.info(f"‚úÖ –°—Ç–∏—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏—Ö–∞ {user_id}: {e}")

def handle_text(update: Update, context: CallbackContext):
    text = update.message.text.lower()
    if "—Å–ª–æ–≤–æ" in text:
        return slovo(update, context)
    elif "–º–æ–ª–∏—Ç–≤" in text:
        return prayer(update, context)
    elif "–ø–æ—á–µ–º—É" in text:
        return why_god(update, context)
    elif "–∏–∏—Å—É—Å" in text:
        return accept_jesus(update, context)
    elif "–≤—Ä–µ–º—è" in text:
        return settime_entry(update, context)

def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher

    logger.info(f"‚è∞ –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {datetime.now()}")

    conv = ConversationHandler(
        entry_points=[
            CommandHandler("settime", settime_entry),
            MessageHandler(Filters.regex("(?i)–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è"), settime_entry)
        ],
        states={CHOOSING_TIME: [MessageHandler(Filters.text & ~Filters.command, settime_received)]},
        fallbacks=[],
        allow_reentry=True
    )

    dp.add_handler(conv)
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("slovo", slovo))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))

    users = load_users()
    for uid, info in users.items():
        try:
            if "time" in info:
                h, m = map(int, info["time"].split(":"))
                updater.job_queue.run_daily(
                    callback=send_daily_verse,
                    time=time(h, m, tzinfo=MoscowTZ),
                    context=int(uid),
                    name=f"verse_{uid}"
                )
                logger.info(f"[–ó–ê–î–ê–ß–ê –°–û–ó–î–ê–ù–ê] user_id={uid} –Ω–∞ {h:02d}:{m:02d}")
        except Exception as e:
            logger.error(f"[–û–®–ò–ë–ö–ê –ü–õ–ê–ù–ò–†–û–í–ö–ò] uid={uid}: {e}")

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
